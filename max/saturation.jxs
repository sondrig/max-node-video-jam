<jittershader name="lumasker">
	<description>
	chroma
	</description>
     <param name="tex0" type="int" default="0" />
	 <param name="saturation" type="float" default="1." />
	<language name="glsl" version="1.0">
     	<bind param="tex0" program="fp" />
		<bind param="saturation" program="fp" />
		<program name="vp" type="vertex" source="sh.passthru.xform.vp.glsl" />
		<program name="fp" type="fragment">
			<![CDATA[

			vec3 rgb2hsv(vec3 rgb)
			{
				float Cmax = max(rgb.r, max(rgb.g, rgb.b));
				float Cmin = min(rgb.r, min(rgb.g, rgb.b));
			    float delta = Cmax - Cmin;

				vec3 hsv = vec3(0., 0., Cmax);
				
				if (Cmax > Cmin)
				{
					hsv.y = delta / Cmax;

					if (rgb.r == Cmax)
						hsv.x = (rgb.g - rgb.b) / delta;
					else
					{
						if (rgb.g == Cmax)
							hsv.x = 2. + (rgb.b - rgb.r) / delta;
						else
							hsv.x = 4. + (rgb.r - rgb.g) / delta;
					}
					hsv.x = fract(hsv.x / 6.);
				}
				return hsv;
			}

			float chromaKey(vec3 color, vec3 keyColor, vec3 weights)
			{
				vec3 backgroundColor = keyColor;

				vec3 hsv = rgb2hsv(color);
				vec3 target = rgb2hsv(backgroundColor);
				float dist = length(weights * (target - hsv));
				return 1. - clamp(3. * dist - 1.5, 0., 1.);
			}

			vec3 changeSaturation(vec3 color, float saturation)
			{
				float luma = dot(vec3(0.213, 0.715, 0.072) * color, vec3(1.));
				return mix(vec3(luma), color, saturation);
			}

			// define our varying texture coordinates
			varying vec2 texcoord0;
			uniform sampler2DRect tex0;		
			uniform float saturation;

			//luma threshold
			uniform vec2 lum;
			//uniform texture2DRect tex1;

			const vec4 lumcoeff = vec4(0.299,0.587,0.114,0.);
			const vec2 iResolution = vec2(256. , 256.);

			void main (void)
			{
				vec2 uv = texcoord0.xy / iResolution.xy;
				vec4 ccolor = texture2DRect(tex0, texcoord0);
				float alpha = texture2DRect(tex0, texcoord0).a;
				vec3 color = ccolor.rgb;	
				color = changeSaturation(color, saturation);
				vec4 test = vec4(alpha, 0., 0., 1.);
				gl_FragColor = vec4(color, 1.);
				
		
			}

			]]>
		</program>
	</language>
</jittershader>
