<jittershader name="lumasker">
	<description>
	chroma
	</description>
     <param name="tex0" type="int" default="0" />
	 <param name="hue" type="float" default="1." />
	<language name="glsl" version="1.0">
     	<bind param="tex0" program="fp" />
		<bind param="hue" program="fp" />
		<program name="vp" type="vertex" source="sh.passthru.xform.vp.glsl" />
		<program name="fp" type="fragment">
			<![CDATA[

			// define our varying texture coordinates
			varying vec2 texcoord0;
			const mat3 rgb2yiq = mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);
			const mat3 yiq2rgb = mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.1070, 1.7046);
			uniform sampler2DRect tex0;		
			uniform float hue;

			const vec2 iResolution = vec2(256. , 256.);

			vec3 toHue(vec3 rgb, float adjustment)
			{
			    const mat3 toYIQ = mat3(0.299,     0.587,     0.114,
			                            0.595716, -0.274453, -0.321263,
			                            0.211456, -0.522591,  0.311135);
			    const mat3 toRGB = mat3(1.0,  0.9563,  0.6210,
			                            1.0, -0.2721, -0.6474,
			                            1.0, -1.107,   1.7046);
			    
			    vec3 yiq = toYIQ * rgb;
			    float hue = atan(yiq.z, yiq.y) + adjustment;
			    float chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);
			    
			    vec3 color = vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));
			    return toRGB * color;
			}

			void main (void)
			{
				vec2 uv = texcoord0.xy / iResolution.xy;
				vec4 ccolor = texture2DRect(tex0, texcoord0);
				vec3 color = ccolor.rgb;	
				vec3 finalColor = toHue(color, hue); 

				gl_FragColor = vec4(finalColor, 1.);
		
			}

			]]>
		</program>
	</language>
</jittershader>
