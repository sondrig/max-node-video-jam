<jittershader name="lumasker">
	<description>
	chroma
	</description>
     <param name="tex0" type="int" default="0" />
     <param name="tex1" type="int" default="1" />
	 <param name="size" type="float" default="0.5" />
	 <param name="coarse" type="float" default=".7" />
	<language name="glsl" version="1.0">
     	<bind param="tex0" program="fp" />
     	<bind param="tex1" program="fp" />
		<bind param="size" program="fp" />
		<bind param="coarse" program="fp" />
		<program name="vp" type="vertex" source="sh.passthru.xform.vp.glsl" />
		<program name="fp" type="fragment">
			<![CDATA[

			varying vec2 texcoord0;
			varying vec2 texcoord1;

			uniform sampler2DRect tex0;		
			uniform sampler2DRect tex1;		
			uniform float coarse;
			uniform float size;

			const vec2 iResolution = vec2(512. ,512.);
			
			float rand(float n){return fract(sin(n) * 43758.5453123);}

			float noise(float p){
			    float fl = floor(p);
			  float fc = fract(p);
			    return mix(rand(fl), rand(fl + 1.0), fc);
			}

			float circle(in vec2 _st, in float _radius){
			    vec2 dist = _st-vec2(0.5);
				float _x = _st.x;
				float _y = _st.y;
				return 1.-smoothstep(_radius-(rand(_x)*coarse),
			                         _radius+(rand(_y)*coarse),
			                         dot(dist,dist)*(16.0*(1.0-size)));
			}

			void main (void)
			{
				vec2 uv = texcoord0.xy / iResolution.xy;
				vec2 pos = vec2(1.0)-uv;
				vec4 v1 = texture2DRect(tex0, texcoord0);
				vec4 v2 = texture2DRect(tex1, texcoord1);

				vec3 color = vec3(circle(pos,size));
				//gl_FragColor = vec4(color, 1.);
				gl_FragColor = vec4(mix(v1.rgb, v2.rgb, color.r), 1.);
		
			}

			]]>
		</program>
	</language>
</jittershader>
