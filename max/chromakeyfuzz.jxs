<jittershader name="lumasker">
	<description>
	chroma
	</description>
     <param name="tex0" type="int" default="0" />
	 <param name="tex1" type="int" default="1" />
	 <param name="tex2" type="int" default="2" />
	 <param name="color_r" type="float" default="0.157" />
     <param name="color_g" type="float" default="0.576" />
	 <param name="color_b" type="float" default="0.129" />
	 <param name="tolerance" type="float" default="0.4" />
	 <param name="texSat0" type="float" default="1." />
	 <param name="texSat1" type="float" default="1." />
     <param name="slope" type="float" default="0.2" />
	<language name="glsl" version="1.0">
     	<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />
		<bind param="tex2" program="fp" />
		<bind param="color_r" program="fp" />
		<bind param="color_g" program="fp" />
		<bind param="color_b" program="fp" />
		<bind param="tolerance" program="fp" />
		<bind param="texSat0" program="fp" />
		<bind param="texSat1" program="fp" />
		<bind param="slope" program="fp" />
		<program name="vp" type="vertex" source="sh.passthru.xform.vp.glsl" />
		<program name="fp" type="fragment">
			<![CDATA[

			vec3 rgb2hsv(vec3 rgb)
			{
				float Cmax = max(rgb.r, max(rgb.g, rgb.b));
				float Cmin = min(rgb.r, min(rgb.g, rgb.b));
			    float delta = Cmax - Cmin;

				vec3 hsv = vec3(0., 0., Cmax);
				
				if (Cmax > Cmin)
				{
					hsv.y = delta / Cmax;

					if (rgb.r == Cmax)
						hsv.x = (rgb.g - rgb.b) / delta;
					else
					{
						if (rgb.g == Cmax)
							hsv.x = 2. + (rgb.b - rgb.r) / delta;
						else
							hsv.x = 4. + (rgb.r - rgb.g) / delta;
					}
					hsv.x = fract(hsv.x / 6.);
				}
				return hsv;
			}
			
			float chromaKeyAlphaTwoFloat(vec3 color, vec3 keyColor, float tolerance, float slope)
			{
				float d = abs(length(abs(keyColor - color)));
				float edge0 = tolerance * (1.0 - slope);
				float alpha = smoothstep(edge0, tolerance, d);
				return 1. - alpha;
			}
			

			vec3 changeSaturation(vec3 color, float saturation)
			{
				float luma = dot(vec3(0.213, 0.715, 0.072) * color, vec3(1.));
				return mix(vec3(luma), color, saturation);
			}
			

			// define our varying texture coordinates
			varying vec2 texcoord0;
			varying vec2 texcoord1;
			varying vec2 texcoord2;
	
			// define our rectangular texture samplers
			uniform sampler2DRect tex0;
			uniform sampler2DRect tex1;
			uniform sampler2DRect tex2;
			
			uniform float color_r;
			uniform float color_g;
			uniform float color_b;
			
			uniform float tolerance;
			uniform float slope;
			
			uniform float texSat0;
			uniform float texSat1;
			

//luma threshold
			uniform vec2 lum;
			//uniform texture2DRect tex1;

			//const vec4 lumcoeff = vec4(0.299,0.587,0.114,0.);
			const vec2 iResolution = vec2(256. , 256.);

			void main (void)
			{
				
				float clampTol = clamp(tolerance, 0., 1.);
				float clampSlope = clamp(slope, 0., 1.);
				
				vec3 color = texture2DRect(tex0, texcoord0).rgb;
				vec3 bg = texture2DRect(tex1, texcoord1).rgb;
				vec3 mix = texture2DRect(tex2, texcoord2).rgb;
				
				float ff = chromaKeyAlphaTwoFloat(color, vec3(color_r,color_g,color_b), clampTol, clampSlope);
				ff *= mix.r;
				
				color = changeSaturation(color, texSat0);
				bg = changeSaturation(bg, texSat1);
				
				color = mix(color, bg, ff);
				gl_FragColor = vec4(color, 1.);
		
			}

			]]>
		</program>
	</language>
</jittershader>